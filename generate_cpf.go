//go:generate go run generate_cpf.go
package main

import (
	"fmt"
	"os"
	"strings"
)

const debugTemplate = `// Code generated by go generate; DO NOT EDIT.

package cpf_debug

import (
	"fmt"

	definitions "github.com/nacioboi/go_cpf/_definitions"
	"github.com/nacioboi/go_cpf/cpf_options"
)

const c__MAX_INTERVAL_AMOUNT = 1<<16 - 1

var (
	interval_amount     uint16
	interval_count_down uint16
	log_level           int

	output_handler func(int, string) = func(l int, s string) {
		if l <= log_level {
			fmt.Print(s)
		}
	}

	prefix_handler 	    func() string
)

func Set(key cpf_options.T__Option, value interface{}) {
	definitions.SetImplementation(
		key,
		value,
		&interval_amount,
		&interval_count_down,
		c__MAX_INTERVAL_AMOUNT,
		&output_handler,
		&prefix_handler,
		&log_level,
	)
}

func Log(level int, format string, args ...interface{}) {
	definitions.LogImplementation(
	level,
	output_handler,
	prefix_handler,
	&interval_amount,
	&interval_count_down,
	format,
	args...,
	)
}

func Formatted(out *string, format string, args ...interface{}) {
	definitions.FormattedImplementation(out, format, args...)
}
`

const releaseTemplate = `//go:build !debug
// +build !debug

// Code generated by go generate; DO NOT EDIT.

package cpf_release

import "github.com/nacioboi/go_cpf/cpf_options"

func Set(key cpf_options.T__Option, value interface{}) {}

func Log(level int, format string, args ...interface{}) {}

func Formatted(out *string, format string, args ...interface{}) {}
`

func writeFile(path, content string) {
	err := os.WriteFile(path, []byte(strings.TrimSpace(content)+"\n"), 0644)
	if err != nil {
		fmt.Println("Failed to generate", path, ":", err)
		os.Exit(1)
	}
	fmt.Println("Generated", path)
}

func main() {
	writeFile("cpf_debug/cpf_debug.go", debugTemplate)
	writeFile("cpf_release/cpf_release.go", releaseTemplate)
}
